import { defContext } from '@thi.ng/parse';
import * as fs from 'fs';
import { AST } from './src/api';
import { buildAst, importsForFile, writeSimpleSettersToFile } from './src/astTransforms';
import { program } from './src/parser';
import { importStatement } from './src/templates';

const inputfile = process.argv.length > 2 && process.argv[2];

if (!inputfile) {
    console.error('Need a TypeScript file as first argument')
} else if (!fs.existsSync(inputfile)) {
    console.error(`${inputfile} doesn't exist`);
} else {
    const [ filename, extension ] = inputfile.split('.');
    const schemaPath = __dirname + '/' + filename + '.' + extension;
    const buildPath = __dirname + '/build/';

    const schema = fs.readFileSync(schemaPath, 'utf8');
    const ctx = defContext(schema, { debug: false });
    program(ctx);
    const asts: AST[] = buildAst(ctx.result)
    const allInterfaces = asts.reduce((acc, intfc) => {
        return (acc.push(intfc[0].name), acc);
    }, [])

    fs.copyFileSync(schemaPath, buildPath + filename + '.' + extension)
    asts.forEach(async ([ { name }, rest ]: AST) => {
        const filepath = `${buildPath}${name}.ts`;
        const imports = importsForFile(rest, allInterfaces);

        fs.writeFileSync(filepath, '// This file is autogenerated\n');
        if (imports.length) {
            fs.appendFileSync(filepath, importStatement(imports, filename));
        }

        await writeSimpleSettersToFile(rest,`${buildPath}${name}.ts`, name);
    })
}
